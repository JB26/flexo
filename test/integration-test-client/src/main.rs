use crate::http_client::{GetRequestTest, http_get, http_get_with_header_chunked, ChunkPattern, ConnAddr, GetRequest};
use std::time::Duration;
use crate::http_client::ClientHeader::{AutoGenerated, Custom};

mod http_client;

fn main() {
    test_malformed_header();
    test_partial_header();
}

fn test_partial_header() {
    // Sending the header in multiple TCP segments does not cause the server to crash
    let uri = GetRequestTest {
        conn_addr: ConnAddr {
            host: "flexo-server-slow-primary".to_owned(),
            port: 7878,
        },
        get_request: GetRequest {
            path: "/community/os/x86_64/lostfiles-4.03-1-any.pkg.tar.xz".to_owned(),
            client_header: AutoGenerated,
        }
    };
    let pattern = ChunkPattern {
        chunk_size: 3,
        wait_interval: Duration::from_millis(300),
    };
    let result = http_get_with_header_chunked(uri, Some(pattern));
    assert_eq!(result.header_result.status_code, 200);
    println!("test_partial_header: [SUCCESS]")
}

fn test_malformed_header() {
    let malformed_header = "this is not a valid http header".to_owned();
    let uri1 = GetRequestTest {
        conn_addr: ConnAddr {
            host: "flexo-server".to_owned(),
            port: 7878,
        },
        get_request: GetRequest {
            path: "/".to_owned(),
            client_header: Custom(malformed_header),
        },
    };
    let result = http_get(uri1);
    println!("result: {:?}", &result);
    assert_eq!(result.header_result.status_code, 400);
    // Test if the server is still up, i.e., the previous request hasn't crashed it:
    let uri2 = GetRequestTest {
        conn_addr: ConnAddr {
            host: "flexo-server".to_owned(),
            port: 7878,
        },
        get_request: GetRequest {
            path: "/status".to_owned(),
            client_header: AutoGenerated,
        },
    };
    let result = http_get(uri2);
    println!("result: {:?}", &result);
    assert_eq!(result.header_result.status_code, 200);
    println!("test_malformed_header: [SUCCESS]")
}

