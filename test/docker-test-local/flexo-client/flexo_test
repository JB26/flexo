#!/bin/bash

# shellcheck disable=SC2016

function fail_and_exit() {
  printf "%-50s %s\n" "$TESTCASE" "[FAILURE]"
  exit 1
}

function print_success() {
  printf "%-50s %s\n" "$TESTCASE" "[SUCCESS]"
}

## ==============================================================================================================
TESTCASE='flexo-test-partial-header'
# Sending the header in multiple TCP segments does not cause the server to crash
## ==============================================================================================================
touch /tmp/header
tail -f /tmp/header | nc -v flexo-server-slow-primary 7878 > /tmp/header_response &

printf 'GET ' >> /tmp/header
# Wait a bit so that the header is sent in multiple segments
sleep .5
printf '/community/os/x86_64/lostfiles-4.03-1-any.pkg.tar.xz HTTP/1.1\r\nHost: flexo-server-slow-primary\r\n\r\n' >> /tmp/header

sleep 1

if grep -q 'HTTP/1.1 200 OK' /tmp/header_response; then
  print_success
else
  fail_and_exit
fi

## ==============================================================================================================
TESTCASE='flexo-test-persistent-connections-c2s'
# Connections made from client-to-server (i.e., from pacman to flexo) should be persistent.
## ==============================================================================================================

declare -a curl_args
for i in {0..99}; do
  curl_args[i]="http://flexo-server-delay:7878/test_$i"
done

echo "downloading ${curl_args[*]}"

# Downloading all 100 files within 200 milliseconds is taken as proof that curl can use persistent connections:
# Since the server has a delay of 100 ms for each connection, 200 ms would not suffice to serve all 100 files
# if a new connection is established for each file.
timeout 200 curl -s -f ${curl_args[*]} || fail_and_exit

print_success

## ==============================================================================================================
TESTCASE='flexo-test-persistent-connections-s2s'
# Connections made from server-to-server (i.e., from flexo to the remote mirror) should be persistent.
## ==============================================================================================================

for i in {0..99}; do
  curl_args[i]="http://flexo-server-delay-primary:7878/test_$i"
done

echo "downloading ${curl_args[*]}"

# See the previous test case for an explanation why we choose the timeout command.
timeout 200 curl -s -f ${curl_args[*]} || fail_and_exit

print_success

## ==============================================================================================================
TESTCASE="flexo-test-mirror-selection-slow-mirror"
# If a remote mirror turns out to be very slow, flexo switches to another mirror.
## ==============================================================================================================
echo 'Server = http://flexo-server-slow-primary:7878/$repo/os/$arch' > /etc/pacman.d/mirrorlist
TIMEOUT="2"
timeout $TIMEOUT pacman -S --noconfirm --noprogressbar --downloadonly dnstracer || fail_and_exit
# Being able to download this file within the timeout is taken as proof that the fast mirror has been selected.
print_success

## ==============================================================================================================
TESTCASE="flexo-test-mirror-selection-slow-mirror"
# If a remote mirror turns out to be very slow, flexo switches to another mirror.
## ==============================================================================================================
echo 'Server = http://flexo-server-slow-primary:7878/$repo/os/$arch' > /etc/pacman.d/mirrorlist
TIMEOUT="2"
timeout $TIMEOUT pacman -S --noconfirm --noprogressbar --downloadonly dnstracer || fail_and_exit
# Being able to download this file within the timeout is taken as proof that the fast mirror has been selected.
print_success

## ==============================================================================================================
TESTCASE="flexo-test-malformed-header"
# Sending a malformed header does not cause the server to crash.
## ==============================================================================================================
echo 'malformed header' | nc -v flexo-server-slow-primary 7878
curl -f http://flexo-server:7878/status || fail_and_exit
# Being able to download this file within the timeout is taken as proof that the fast mirror has been selected.
print_success

## ==============================================================================================================
TESTCASE='flexo-test-concurrent-download-non-blocking'
# Downloading a larger file does not stop another client from obtaining a small file quickly.
## ==============================================================================================================
echo 'Server = http://flexo-server-slow-primary:7878/$repo/os/$arch' > /etc/pacman.d/mirrorlist
# First, we start downloading a relatively large file:
curl http://flexo-server-slow-primary:7878/zero > /dev/null &
CURL_PID=$!
# Next, we download a smaller package:
SMALL_PACKAGE='realtime-privileges'
DOWNLOAD_PATH=$(pacman -Sp $SMALL_PACKAGE)
curl "$DOWNLOAD_PATH" > /dev/null || fail_and_exit
# The download of the second package should have completed before the first download.
if ps -p $CURL_PID >/dev/null; then
  print_success
else
  fail_and_exit
fi

## ==============================================================================================================
TESTCASE='flexo-test-download-large-file'
# Large files can be downloaded.
# This test case is mainly used to provoke errors due to various 2GiB or 4GiB limits. For instance,
# sendfile uses off_t as offset (see man 2 sendfile). off_t can be only 32 bit on some platforms.
## ==============================================================================================================
curl http://flexo-server-fast:7878/large > /dev/null || fail_and_exit
print_success

## ==============================================================================================================
TESTCASE='flexo-test-download-large-file-cached'
# Large files can be downloaded from the cache.
## ==============================================================================================================
curl http://flexo-server-fast:7878/large > /dev/null || fail_and_exit
print_success

## ==============================================================================================================
TESTCASE='flexo-test-download-large-file-cached-resume'
# Large files can be resumed
## ==============================================================================================================
curl --continue-at 6291456 http://flexo-server-fast:7878/large > /dev/null || fail_and_exit
print_success
